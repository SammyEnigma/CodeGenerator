@using RazorLight
@using Generator.Template;
@inherits TemplatePage<ViewInfoWapper>
@{
    DisableEncoding = true;
}


            /// <summary>
            /// 获取记录总数
            /// </summary>
            public static int GetCount(Expression<Func<@Model.TableInfo.Name, bool>> predicate = null)
            {
	            var where_str = string.Empty;
	            if (predicate != null)
	            {
		            var parser = new PredicateParser();
		            where_str = parser.Parse(predicate);
                }

                var sql = new StringBuilder();
                sql.Append("SELECT COUNT(1) FROM @Model.MakeTableName(Model.TableInfo.Name)");
                if (where_str != string.Empty)
                    sql.Append(" WHERE " + where_str);

                var ret = -1;
                using (var conn = GetOpenConnection())
                    ret = conn.ExecuteScalar<int>(sql.ToString());

                return ret;
            }

            /// <summary>
            /// 分页获取数据列表
            /// </summary>
            public static PageDataView<@Model.TableInfo.Name>GetPage(Expression<Func<@Model.TableInfo.Name, bool>> predicate = null, int pageSize = 20, int currentPage = 1, @(Model.TableInfo.Name)Column orderBy = null, params @(Model.TableInfo.Name)Column[] columns)
            {
	            var where_str = string.Empty;
	            if (predicate != null)
	            {
		            var parser = new PredicateParser();
		            where_str = parser.Parse(predicate);
	            }

	            var orderby_str = string.Empty;
                if (orderBy != null)
                {
                    orderby_str = $"[{orderBy.Name}] {orderBy.Asc}";
                }

                var column_str = "*";
                if (columns != null && columns.Length > 0)
                {
                    column_str = string.Join(", ", columns.Select(p => $"[{p.Name}]"));
                }

	            return Paged<@Model.TableInfo.Name>(
			            "[@(Model.TableInfo.Name)]",
			            where_str,
			            orderby_str,
			            column_str,
			            pageSize,
			            currentPage);
            }

            /// <summary>
            /// 分页获取数据列表
            /// </summary>
            public static PageDataView<@Model.TableInfo.Name> GetPage(Expression<Func<@Model.TableInfo.Name, bool>> predicate, int pageSize, int currentPage, IList<@(Model.TableInfo.Name)Column> orderBy, params @(Model.TableInfo.Name)Column[] columns)
            {
	            var where_str = string.Empty;
	            if (predicate != null)
	            {
		            var parser = new PredicateParser();
		            where_str = parser.Parse(predicate);
	            }

	            var orderby_str = string.Empty;
                if (orderBy != null && orderBy.Count > 0)
                {
                    orderby_str = string.Join(", ", orderBy.Select(p => $"[{p.Name}] {p.Asc}"));
                }
        
                var column_str = "*";
                if (columns != null && columns.Length > 0)
                {
                    column_str = string.Join(", ", columns.Select(p => $"[{p.Name}]"));
                }

	            return Paged<@Model.TableInfo.Name>(
                            "[@(Model.TableInfo.Name)]",
                            where_str,
                            orderby_str,
                            column_str,
                            pageSize,
                            currentPage);
                }
            }