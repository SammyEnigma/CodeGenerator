@using RazorLight
@using Generator.Template;
@inherits TemplatePage<ViewInfoWapper>
@{
    DisableEncoding = true;
}

        /// <summary>
        /// 获取记录总数
        /// </summary>
        public static int GetCount(Expression<Func<@Model.TableInfo.Name, bool>> predicate = null)
        {
	        var where_str = string.Empty;
	        if (predicate != null)
	        {
		        var parser = new PredicateParser();
		        where_str = parser.Parse(predicate);
            }

            var sql = new StringBuilder();
            sql.Append("SELECT COUNT(1) FROM @Model.MakeTableName(Model.TableInfo.Name)");
            if (where_str != string.Empty)
                sql.Append(" WHERE " + where_str);

            var ret = -1;
            using (var conn = GetOpenConnection())
                ret = conn.ExecuteScalar<int>(sql.ToString());

            return ret;
        }

        /// <summary>
        /// 分页获取数据列表
        /// </summary>
        public static PageDataView<@Model.TableInfo.Name>GetPage(int currentPage, int pageSize, params @(Model.TableInfo.Name)Column[] columns)
        {
	        return Paged<@Model.TableInfo.Name>(
			        "@Model.MakeTableName(Model.TableInfo.Name)",
                    currentPage, 
                    pageSize, 
			        string.Empty,
			        columns);
        }

        /// <summary>
        /// 分页获取数据列表
        /// </summary>
        public static PageDataView<@Model.TableInfo.Name> GetPage(Expression<Func<@Model.TableInfo.Name, bool>> predicate, int currentPage, int pageSize, params @(Model.TableInfo.Name)Column[] columns)
        {
            var parser = new PredicateParser();
	        var where_str = parser.Parse(predicate);

	        return Paged<@Model.TableInfo.Name>(
                        "@Model.MakeTableName(Model.TableInfo.Name)",
                        currentPage, 
                        pageSize, 
			            where_str,
			            columns);
        }

        private static PageDataView<@Model.TableInfo.Name> Paged<@Model.TableInfo.Name>(
            string tableName,
            int currentPage,
            int pageSize,
            string where,
            params IColumn[] columns)
        {
            var result = new PageDataView<@Model.TableInfo.Name>();
            var count_sql = $"SELECT COUNT(1) FROM @Model.TableInfo.Name";

            var orderby_str = new StringBuilder();
            var column_str = new StringBuilder();
            for (var i = 0; i < columns.Length; i++)
            {
                var col = columns[i];
                if (col.OrderBy)
                {
                    orderby_str.Append("[");
                    orderby_str.Append(col.Name);
                    orderby_str.Append("] ");
                    orderby_str.Append(col.Direction);
                    orderby_str.Append(", ");
                }
                column_str.Append("[");
                column_str.Append(col.Name);
                column_str.Append("], ");

                if (i == columns.Length - 1)
                {
                    column_str.Remove(column_str.Length - 3, 3);
                    orderby_str.Remove(orderby_str.Length - 3, 3);
                }
            }

            var sql = string.Format("SELECT {0} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {1}) AS Row, {0} FROM {2} {3}) AS Paged ", 
                column_str.ToString(), orderby_str.ToString(), tableName, where);
            var pageStart = (currentPage - 1) * pageSize;
            sql += string.Format(" WHERE Row >{0} AND Row <={1}", pageStart, pageStart + pageSize);
            count_sql += where;
            using (var conn = GetOpenConnection())
            {
                result.TotalRecords = conn.ExecuteScalar<int>(count_sql);
                result.TotalPages = result.TotalRecords / pageSize;
                if (result.TotalRecords % pageSize > 0)
                    result.TotalPages += 1;
                var list = conn.Query<@Model.TableInfo.Name>(sql);
                result.Items = list.Count() == 0 ? (new List<@Model.TableInfo.Name>()) : list.ToList();
            }

            return result;
        }