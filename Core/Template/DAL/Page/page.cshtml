@using RazorLight
@using Generator.Template;
@using Generator.Common;
@inherits TemplatePage<ViewInfoWapper>
@{
    DisableEncoding = true;
}
		/// <summary>
    /// 获取记录总数
    ///
</summary>
        public static int GetCount(Expression<Func<{0}, bool>
    > predicate = null)
    {{
			var where_str = string.Empty;
			if (predicate != null)
			{{
				var parser = new PredicateParser();
				where_str = parser.Parse(predicate);
    }}

    var sql = new StringBuilder();
    sql.Append("SELECT COUNT(1) FROM {1}");
    if (where_str != string.Empty)
    sql.Append(" WHERE " + where_str);

    var ret = -1;
    using (var conn = GetOpenConnection())
    {{
                ret = conn.ExecuteScalar<int>(sql.ToString());
    }}

    return ret;
    }}

    /// <summary>
        /// 分页获取数据列表
        ///
    </summary>
    public static PageDataView<{0}>
        GetPage(
        Expression<Func<{0}, bool>> predicate = null,
			int pageSize = 20,
			int currentPage = 1,
			{0}Column orderBy = null,
			params {0}Column[] columns)
        {{
			var where_str = string.Empty;
			if (predicate != null)
			{{
				var parser = new PredicateParser();
				where_str = parser.Parse(predicate);
			}}

			var orderby_str = string.Empty;
            if (orderBy != null)
            {{
                orderby_str = $"[{{orderBy.Name}}] {{orderBy.Asc}}";
            }}

            var column_str = "*";
            if (columns != null && columns.Length > 0)
            {{
                column_str = string.Join(", ", columns.Select(p => $"[{{p.Name}}]"));
            }}

			return Paged<{0}>(
					"[{0}]",
					where_str,
					orderby_str,
					column_str,
					pageSize,
					currentPage);
        }}

		/// <summary>
		/// 分页获取数据列表
		/// </summary>
		public static PageDataView<{0}> GetPage(
			Expression<Func<{0}, bool>> predicate,
			int pageSize,
			int currentPage,
			IList<{0}Column> orderBy,
			params {0}Column[] columns)
        {{
			var where_str = string.Empty;
			if (predicate != null)
			{{
				var parser = new PredicateParser();
				where_str = parser.Parse(predicate);
			}}

			var orderby_str = string.Empty;
            if (orderBy != null && orderBy.Count > 0)
            {{
                orderby_str = string.Join(", ", orderBy.Select(p => $"[{{p.Name}}] {{p.Asc}}"));
            }}

            var column_str = "*";
            if (columns != null && columns.Length > 0)
            {{
                column_str = string.Join(", ", columns.Select(p => $"[{{p.Name}}]"));
            }}

			return Paged<{0}>
    (
    "[{0}]",
    where_str,
    orderby_str,
    column_str,
    pageSize,
    currentPage);
    }}

    /// <summary>
        /// 分页获取InnerJoined数据列表
        ///
    </summary>
    public static PageDataView<{0}>
        GetInnerJoinedPage(
        Expression<Func<{1}, {2}, bool>> on,
			Expression<Func<{1}, {2}, bool>> predicate = null,
			int pageSize = 20,
			int currentPage = 1,
			IColumn orderBy = null,
			params IColumn[] columns)
        {{
			if (on == null)
                throw new ArgumentNullException("on");

			var on_str = string.Empty;
			var parser = new PredicateParser();
			on_str = parser.Parse(on);

            var where_str = string.Empty;
			if (predicate != null)
			{{
				parser.Reset();
				where_str = parser.Parse(predicate);
			}}

			var orderby_str = string.Empty;
            if (orderBy != null)
            {{
                orderby_str = $"[{{orderBy.Table}}].[{{orderBy.Name}}] {{orderBy.Asc}}";
            }}

            var column_str = new StringBuilder();
            column_str.Append(string.Join(", ", {1}Helper.Columns.All.Select(p => $"[{{p.Table}}].[{{p.Name}}]")));
            column_str.Append(", ");
            column_str.Append(string.Join(", ", {2}Helper.Columns.All.Select(p => $"[{{p.Table}}].[{{p.Name}}] as [{{p.Name}}2]")));
            if (columns != null && columns.Length > 0)
            {{
                var has_id1 = false;
                var has_id2 = false;
                var col_list1 = new List<string>();
                var col_list2 = new List<string>();
                for (int i = 0; i < columns.Length; i++)
                {{
                    var col = columns[i];
                    if (col.Table == "{1}")
                    {{
                        if (col.Name == "Id")
                        {{
                            has_id1 = true;
                        }}
                        col_list1.Add($"[{{col.Table}}].[{{col.Name}}]");
                    }}
                    else
                    {{
                        if (col.Name == "Id")
                        {{
                            has_id2 = true;
                        }}
                        col_list2.Add($"[{{col.Table}}].[{{col.Name}}] as [{{col.Name}}2]");
                    }}
                }}
                if (!has_id1)
                {{
                    col_list1.Insert(0, "[{1}].[Id]");
                }}
                if (!has_id2)
                {{
                    col_list2.Insert(0, "[{2}].[Id] as [Id2]");
                }}

                column_str.Append(string.Join(", ", col_list1.Select(p => p)));
                column_str.Append(", ");
                column_str.Append(string.Join(", ", col_list2.Select(p => p)));
            }}

			return JoinPaged(
					2,
					on_str,
					where_str,
					orderby_str,
					column_str.ToString(),
					pageSize,
					currentPage);
        }}

		/// <summary>
		/// 分页获取InnerJoined数据列表
		/// </summary>
		public static PageDataView<{0}> GetInnerJoinedPage(
			Expression<Func<{1}, {2}, bool>> on,
			Expression<Func<{1}, {2}, bool>> predicate,
			int pageSize,
			int currentPage,
			IList<IColumn>
    orderBy,
    params IColumn[] columns)
    {{
			if (on == null)
                throw new ArgumentNullException("on");

			var on_str = string.Empty;
			var parser = new PredicateParser();
			on_str = parser.Parse(on);

            var where_str = string.Empty;
			if (predicate != null)
			{{
				parser.Reset();
				where_str = parser.Parse(predicate);
    }}

    var orderby_str = string.Empty;
    if (orderBy != null && orderBy.Count > 0)
    {{
                orderby_str = string.Join(", ", orderBy.Select(p => $"[{{p.Table}}].[{{p.Name}}] {{p.Asc}}"));
    }}

    var column_str = new StringBuilder();
    column_str.Append(string.Join(", ", {1}Helper.Columns.All.Select(p => $"[{{p.Table}}].[{{p.Name}}]")));
    column_str.Append(", ");
    column_str.Append(string.Join(", ", {2}Helper.Columns.All.Select(p => $"[{{p.Table}}].[{{p.Name}}] as [{{p.Name}}2]")));
    if (columns != null && columns.Length > 0)
    {{
                var has_id1 = false;
                var has_id2 = false;
                var col_list1 = new List<string>();
                var col_list2 = new List<string>();
                for (int i = 0; i < columns.Length; i++)
                {{
                    var col = columns[i];
                    if (col.Table == "{1}")
                    {{
                        if (col.Name == "Id")
                        {{
                            has_id1 = true;
    }}
    col_list1.Add($"[{{col.Table}}].[{{col.Name}}]");
    }}
    else
    {{
                        if (col.Name == "Id")
                        {{
                            has_id2 = true;
    }}
    col_list2.Add($"[{{col.Table}}].[{{col.Name}}] as [{{col.Name}}2]");
    }}
    }}
    if (!has_id1)
    {{
                    col_list1.Insert(0, "[{1}].[Id]");
    }}
    if (!has_id2)
    {{
                    col_list2.Insert(0, "[{2}].[Id] as [Id2]");
    }}

    column_str.Append(string.Join(", ", col_list1.Select(p => p)));
    column_str.Append(", ");
    column_str.Append(string.Join(", ", col_list2.Select(p => p)));
    }}

    return JoinPaged(
    2,
    on_str,
    where_str,
    orderby_str,
    column_str.ToString(),
    pageSize,
    currentPage);
    }}

    /// <summary>
        /// 分页获取LeftJoined数据列表
        ///
    </summary>
    public static PageDataView<{0}>
        GetLeftJoinedPage(
        Expression<Func<{1}, {2}, bool>> on,
			Expression<Func<{1}, {2}, bool>> predicate = null,
			int pageSize = 20,
			int currentPage = 1,
			IColumn orderBy = null,
			params IColumn[] columns)
        {{
			if (on == null)
                throw new ArgumentNullException("on");

			var on_str = string.Empty;
			var parser = new PredicateParser();
			on_str = parser.Parse(on);

            var where_str = string.Empty;
			if (predicate != null)
			{{
				parser.Reset();
				where_str = parser.Parse(predicate);
			}}

			var orderby_str = string.Empty;
            if (orderBy != null)
            {{
                orderby_str = $"[{{orderBy.Table}}].[{{orderBy.Name}}] {{orderBy.Asc}}";
            }}

            var column_str = new StringBuilder();
            column_str.Append(string.Join(", ", {1}Helper.Columns.All.Select(p => $"[{{p.Table}}].[{{p.Name}}]")));
            column_str.Append(", ");
            column_str.Append(string.Join(", ", {2}Helper.Columns.All.Select(p => $"[{{p.Table}}].[{{p.Name}}] as [{{p.Name}}2]")));
            if (columns != null && columns.Length > 0)
            {{
                var has_id1 = false;
                var has_id2 = false;
                var col_list1 = new List<string>();
                var col_list2 = new List<string>();
                for (int i = 0; i < columns.Length; i++)
                {{
                    var col = columns[i];
                    if (col.Table == "{1}")
                    {{
                        if (col.Name == "Id")
                        {{
                            has_id1 = true;
                        }}
                        col_list1.Add($"[{{col.Table}}].[{{col.Name}}]");
                    }}
                    else
                    {{
                        if (col.Name == "Id")
                        {{
                            has_id2 = true;
                        }}
                        col_list2.Add($"[{{col.Table}}].[{{col.Name}}] as [{{col.Name}}2]");
                    }}
                }}
                if (!has_id1)
                {{
                    col_list1.Insert(0, "[{1}].[Id]");
                }}
                if (!has_id2)
                {{
                    col_list2.Insert(0, "[{2}].[Id] as [Id2]");
                }}

                column_str.Append(string.Join(", ", col_list1.Select(p => p)));
                column_str.Append(", ");
                column_str.Append(string.Join(", ", col_list2.Select(p => p)));
            }}

			return JoinPaged(
					1,
					on_str,
					where_str,
					orderby_str,
					column_str.ToString(),
					pageSize,
					currentPage);
        }}

		/// <summary>
		/// 分页获取LeftJoined数据列表
		/// </summary>
		public static PageDataView<{0}> GetLeftJoinedPage(
			Expression<Func<{1}, {2}, bool>> on,
			Expression<Func<{1}, {2}, bool>> predicate,
			int pageSize,
			int currentPage,
			IList<IColumn>
    orderBy,
    params IColumn[] columns)
    {{
			if (on == null)
                throw new ArgumentNullException("on");

			var on_str = string.Empty;
			var parser = new PredicateParser();
			on_str = parser.Parse(on);

            var where_str = string.Empty;
			if (predicate != null)
			{{
				parser.Reset();
				where_str = parser.Parse(predicate);
    }}

    var orderby_str = string.Empty;
    if (orderBy != null && orderBy.Count > 0)
    {{
                orderby_str = string.Join(", ", orderBy.Select(p => $"[{{p.Table}}].[{{p.Name}}] {{p.Asc}}"));
    }}

    var column_str = new StringBuilder();
    column_str.Append(string.Join(", ", {1}Helper.Columns.All.Select(p => $"[{{p.Table}}].[{{p.Name}}]")));
    column_str.Append(", ");
    column_str.Append(string.Join(", ", {2}Helper.Columns.All.Select(p => $"[{{p.Table}}].[{{p.Name}}] as [{{p.Name}}2]")));
    if (columns != null && columns.Length > 0)
    {{
                var has_id1 = false;
                var has_id2 = false;
                var col_list1 = new List<string>();
                var col_list2 = new List<string>();
                for (int i = 0; i < columns.Length; i++)
                {{
                    var col = columns[i];
                    if (col.Table == "{1}")
                    {{
                        if (col.Name == "Id")
                        {{
                            has_id1 = true;
    }}
    col_list1.Add($"[{{col.Table}}].[{{col.Name}}]");
    }}
    else
    {{
                        if (col.Name == "Id")
                        {{
                            has_id2 = true;
    }}
    col_list2.Add($"[{{col.Table}}].[{{col.Name}}] as [{{col.Name}}2]");
    }}
    }}
    if (!has_id1)
    {{
                    col_list1.Insert(0, "[{1}].[Id]");
    }}
    if (!has_id2)
    {{
                    col_list2.Insert(0, "[{2}].[Id] as [Id2]");
    }}

    column_str.Append(string.Join(", ", col_list1.Select(p => p)));
    column_str.Append(", ");
    column_str.Append(string.Join(", ", col_list2.Select(p => p)));
    }}

    return JoinPaged(
    1,
    on_str,
    where_str,
    orderby_str,
    column_str.ToString(),
    pageSize,
    currentPage);
    }}

    /// <summary>
        /// 分页获取数据列表
        /// link: https://stackoverflow.com/questions/7472088/correct-use-of-multimapping-in-dapper
        ///
    </summary>
    private static PageDataView<{0}>
    JoinPaged(
    int type, /* 1 left 2 inner 3 right */
    string on,
    string where,
    string orderBy,
    string columns,
    int pageSize,
    int currentPage)
    {{
			var tableName1 = "{1}";
			var tableName2 = "{2}";
            var result = new PageDataView<{0}>();
            var join = type == 1 ? "LEFT JOIN" : (type == 2 ? " INNER JOIN" : "RIGHT JOIN");
            var count_sql = string.Format("SELECT COUNT(1) FROM {{0}} {{1}} {{2}} ON {{3}} {{4}}",
    tableName1,
    join,
    tableName2,
    on,
    string.IsNullOrEmpty(where) ? string.Empty : "WHERE " + where);

    if (string.IsNullOrWhiteSpace(orderBy))
    {{
                orderBy = "[{1}].[Id] desc";
    }}

    var sql = string.Format("SELECT {{0}} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {{2}}) AS Row, {{1}} FROM {{3}} {{4}} {{5}} ON {{6}} {{7}}) AS Paged ",
    "Paged.*",
    columns,
    orderBy,
    tableName1,
    join,
    tableName2,
    on,
    string.IsNullOrEmpty(where) ? string.Empty : "WHERE " + where);
    var pageStart = (currentPage - 1) * pageSize;
    sql += string.Format(" WHERE Row >{{0}} AND Row <={{1}}", pageStart, pageStart + pageSize);
    using (var conn = GetOpenConnection())
    {{
                result.TotalRecords = connection.ExecuteScalar<int>(count_sql);
                result.TotalPages = result.TotalRecords / pageSize;
                if (result.TotalRecords % pageSize > 0)
                    result.TotalPages += 1;
				SqlMapper.SetTypeMap(typeof({0}.{2}), type_map);
                var list = connection.Query<{0}, {0}.{2}, {0}>(sql,
					(p1, p2) =>
					{{
						p1.{3} = p2;
						return p1;
    }}, splitOn: "Id2").ToList();
    result.Items = list;
    SqlMapper.RemoveTypeMap(typeof({0}.{2}));
    }}

    return result;
    }}

    /// <summary>
        /// 分页获取RightJoined数据列表
        ///
    </summary>
    public static PageDataView<{0}>
        GetRightJoinedPage(
        Expression<Func<{1}, {2}, bool>> on,
			Expression<Func<{1}, {2}, bool>> predicate = null,
			int pageSize = 20,
			int currentPage = 1,
			IColumn orderBy = null,
			params IColumn[] columns)
        {{
			if (on == null)
                throw new ArgumentNullException("on");

			var on_str = string.Empty;
			var parser = new PredicateParser();
			on_str = parser.Parse(on);

            var where_str = string.Empty;
			if (predicate != null)
			{{
				parser.Reset();
				where_str = parser.Parse(predicate);
			}}

			var orderby_str = string.Empty;
            if (orderBy != null)
            {{
                orderby_str = $"[{{orderBy.Table}}].[{{orderBy.Name}}] {{orderBy.Asc}}";
            }}

            var column_str = new StringBuilder();
            column_str.Append(string.Join(", ", {1}Helper.Columns.All.Select(p => $"[{{p.Table}}].[{{p.Name}}]")));
            column_str.Append(", ");
            column_str.Append(string.Join(", ", {2}Helper.Columns.All.Select(p => $"[{{p.Table}}].[{{p.Name}}] as [{{p.Name}}2]")));
            if (columns != null && columns.Length > 0)
            {{
                var has_id1 = false;
                var has_id2 = false;
                var col_list1 = new List<string>();
                var col_list2 = new List<string>();
                for (int i = 0; i < columns.Length; i++)
                {{
                    var col = columns[i];
                    if (col.Table == "{1}")
                    {{
                        if (col.Name == "Id")
                        {{
                            has_id1 = true;
                        }}
                        col_list1.Add($"[{{col.Table}}].[{{col.Name}}]");
                    }}
                    else
                    {{
                        if (col.Name == "Id")
                        {{
                            has_id2 = true;
                        }}
                        col_list2.Add($"[{{col.Table}}].[{{col.Name}}] as [{{col.Name}}2]");
                    }}
                }}
                if (!has_id1)
                {{
                    col_list1.Insert(0, "[{1}].[Id]");
                }}
                if (!has_id2)
                {{
                    col_list2.Insert(0, "[{2}].[Id] as [Id2]");
                }}

                column_str.Append(string.Join(", ", col_list1.Select(p => p)));
                column_str.Append(", ");
                column_str.Append(string.Join(", ", col_list2.Select(p => p)));
            }}

			return JoinPaged(
					3,
					on_str,
					where_str,
					orderby_str,
					column_str.ToString(),
					pageSize,
					currentPage);
        }}

		/// <summary>
		/// 分页获取RightJoined数据列表
		/// </summary>
		public static PageDataView<{0}> GetRightJoinedPage(
			Expression<Func<{1}, {2}, bool>> on,
			Expression<Func<{1}, {2}, bool>> predicate,
			int pageSize,
			int currentPage,
			IList<IColumn> orderBy,
			params IColumn[] columns)
        {{
			if (on == null)
                throw new ArgumentNullException("on");

			var on_str = string.Empty;
			var parser = new PredicateParser();
			on_str = parser.Parse(on);

            var where_str = string.Empty;
			if (predicate != null)
			{{
				parser.Reset();
				where_str = parser.Parse(predicate);
			}}

			var orderby_str = string.Empty;
            if (orderBy != null && orderBy.Count > 0)
            {{
                orderby_str = string.Join(", ", orderBy.Select(p => $"[{{p.Table}}].[{{p.Name}}] {{p.Asc}}"));
            }}

            var column_str = new StringBuilder();
            column_str.Append(string.Join(", ", {1}Helper.Columns.All.Select(p => $"[{{p.Table}}].[{{p.Name}}]")));
            column_str.Append(", ");
            column_str.Append(string.Join(", ", {2}Helper.Columns.All.Select(p => $"[{{p.Table}}].[{{p.Name}}] as [{{p.Name}}2]")));
            if (columns != null && columns.Length > 0)
            {{
                var has_id1 = false;
                var has_id2 = false;
                var col_list1 = new List<string>();
                var col_list2 = new List<string>();
                for (int i = 0; i < columns.Length; i++)
                {{
                    var col = columns[i];
                    if (col.Table == "{1}")
                    {{
                        if (col.Name == "Id")
                        {{
                            has_id1 = true;
                        }}
                        col_list1.Add($"[{{col.Table}}].[{{col.Name}}]");
                    }}
                    else
                    {{
                        if (col.Name == "Id")
                        {{
                            has_id2 = true;
                        }}
                        col_list2.Add($"[{{col.Table}}].[{{col.Name}}] as [{{col.Name}}2]");
                    }}
                }}
                if (!has_id1)
                {{
                    col_list1.Insert(0, "[{1}].[Id]");
                }}
                if (!has_id2)
                {{
                    col_list2.Insert(0, "[{2}].[Id] as [Id2]");
                }}

                column_str.Append(string.Join(", ", col_list1.Select(p => p)));
                column_str.Append(", ");
                column_str.Append(string.Join(", ", col_list2.Select(p => p)));
            }}

			return JoinPaged(
					3,
					on_str,
					where_str,
					orderby_str,
					column_str.ToString(),
					pageSize,
					currentPage);
        }}
