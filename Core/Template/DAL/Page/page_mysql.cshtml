@using RazorLight
@using Generator.Template;
@inherits TemplatePage<ViewInfoWapper>
@{
    DisableEncoding = true;
}
		/// <summary>
        /// 此分页用于有数值型主键的table,如果表数据庞大最好手写一个高效的分页方式
        /// </summary>
		public static PageDataView<@(Model.TableInfo.Name)> GetPage(Expression<Func<@(Model.TableInfo.Name), bool>> predicate = null, int pageSize = 20, int currentPage = 1, @(Model.TableInfo.Name)Column orderBy = null, params @(Model.TableInfo.Name)Column[] columns)
        {
			var where_str = string.Empty;
			if (predicate != null)
			{
				var parser = new PredicateParser();
				where_str = parser.Parse(predicate.Body);
			}

			var orderby_str = string.Empty;
            if (orderBy != null)
            {
                orderby_str = $"@(Model.EscapeLeft){orderBy.Name}@(Model.EscapeRight) {orderBy.Asc}";
            }

            var column_str = "*";
            if (columns != null && columns.Length > 0)
            {
                column_str = string.Join(", ", columns.Select(p => $"@(Model.EscapeLeft){p.Name}@(Model.EscapeRight)"));
            }

			return Paged<@(Model.TableInfo.Name)>("@(Model.EscapeLeft)@(Model.TableInfo.Name)@(Model.EscapeRight)", where_str, orderby_str, column_str, pageSize, currentPage, "@(Model.EscapeLeft)@(Model.TableInfo.PrimaryKey)@(Model.EscapeRight)");
        }

		/// <summary>
		/// 分页获取数据列表
		/// </summary>
		public static PageDataView<@(Model.TableInfo.Name)> GetPage(Expression<Func<@(Model.TableInfo.Name), bool>> predicate, int pageSize, int currentPage, IList<@(Model.TableInfo.Name)Column> orderBy, params @(Model.TableInfo.Name)Column[] columns)
        {
            var where_str = string.Empty;
            if (predicate != null)
            {
            var parser = new PredicateParser();
            where_str = parser.Parse(predicate.Body);
            }

            var orderby_str = string.Empty;
            if (orderBy != null && orderBy.Count > 0)
            {
            orderby_str = string.Join(", ", orderBy.Select(p => $"@(Model.EscapeLeft){p.Name}@(Model.EscapeRight) {p.Asc}"));
            }

            var column_str = "*";
            if (columns != null && columns.Length > 0)
            {
            column_str = string.Join(", ", columns.Select(p => $"@(Model.EscapeLeft){p.Name}@(Model.EscapeRight)"));
            }

            return Paged<@(Model.TableInfo.Name)>("@(Model.EscapeLeft)@(Model.TableInfo.Name)@(Model.EscapeRight)", where_str, orderby_str, column_str, pageSize, currentPage, "@(Model.EscapeLeft)@(Model.TableInfo.PrimaryKey)@(Model.EscapeRight)");
        }

        protected static PageDataView<@(Model.TableInfo.Name)> Paged<@(Model.TableInfo.Name)>(string tableName, string where, string orderBy, string columns, int pageSize, int currentPage, string primaryKey)
        {
            var result = new PageDataView<@(Model.TableInfo.Name)>();
            var count_sql = string.Format("SELECT COUNT(1) FROM {0}", tableName);

            if (!string.IsNullOrWhiteSpace(where))
            {
                if (where.ToLower().Contains("where"))
                {
                    throw new ArgumentException("where子句不需要带where关键字");
                }
                where = " WHERE " + where;
            }
            var pageStart = (currentPage - 1) * pageSize;
            var sql = string.Format("SELECT {0} FROM {2} where {6} >=(select {6} from {2} {3}  limit {4},1) limit {5}; ", columns, "", tableName, where, pageStart, pageSize, primaryKey);
            if (!string.IsNullOrWhiteSpace(orderBy))
            {
                sql = string.Format("SELECT {0} FROM {2} where {6} >=(select {6} from {2} {3}  ORDER BY {1} limit {4},1) limit {5}; ", columns, orderBy, tableName, where, pageStart, pageSize, primaryKey);
            }

            count_sql += where;
            using (var conn = GetOpenConnection())
            {
                result.TotalRecords = conn.ExecuteScalar<int>(count_sql);
                result.TotalPages = result.TotalRecords / pageSize;
                if (result.TotalRecords % pageSize > 0)
                    result.TotalPages += 1;
                var list = conn.Query<@(Model.TableInfo.Name)>(sql);
                result.Items = list.Count() == 0 ? (new List<@(Model.TableInfo.Name)>()) : list.ToList();
            }

            return result;
        }
