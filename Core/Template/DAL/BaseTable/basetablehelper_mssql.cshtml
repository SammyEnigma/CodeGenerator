@using RazorLight
@using Generator.Template;
@using Generator.Common;
@inherits TemplatePage<ViewInfoWapper>
@{
    DisableEncoding = true;
}
using Dapper;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Text;

namespace @(Model.Config.DALConfig.Namespace).Base
{
    public interface IColumn
    {
        string Table { get; }
        string Name { get; }
        bool OrderBy { get; }
        string Direction { get; }
    }

    public abstract class BaseTableHelper
    {
        private static string _connectionstring;
        public static string ConnectionString { get { return _connectionstring; } }

        private static IDbConnection _connection;

        protected static IDbConnection connection => _connection ?? (_connection = GetOpenConnection());

        static BaseTableHelper()
        {
            // 添加json配置文件路径
#if DEBUG
            var builder = new ConfigurationBuilder().SetBasePath(System.AppDomain.CurrentDomain.BaseDirectory).AddJsonFile("appsettings.Development.json");
#else
            var builder = new ConfigurationBuilder().SetBasePath(System.AppDomain.CurrentDomain.BaseDirectory).AddJsonFile("appsettings.json");
#endif
            // 创建配置根对象
            var configurationRoot = builder.Build();
            _connectionstring = configurationRoot.GetSection("ConnectionString").Value;
        }

        protected static IDbConnection GetOpenConnection()
        {
            var connection = new SqlConnection(_connectionstring);
            connection.Open();
            return connection;
        }

        protected static PageDataView<T> Paged<T>(
            string tableName,
            int currentPage,
            int pageSize,
            string where,
            params IColumn[] columns)
        {
            var result = new PageDataView<T>();
            var count_sql = $"SELECT COUNT(1) FROM {tableName}";

            var orderby_str = new StringBuilder();
            var column_str = new StringBuilder();
            for (var i = 0; i < columns.Length; i++)
            {
                var col = columns[i];
                if (col.OrderBy)
                {
@{ }
                    orderby_str.Append("@(Model.EscapeLeft)");
                    orderby_str.Append(col.Name);
                    orderby_str.Append("@(Model.EscapeRight) ");
                    orderby_str.Append(col.Direction);
                    orderby_str.Append(", ");
                }
                
                column_str.Append("@(Model.EscapeLeft)");
                column_str.Append(col.Name);
                column_str.Append("@(Model.EscapeRight), ");

                if (i == columns.Length - 1)
                {
                    column_str.Remove(column_str.Length - @(Model.EscapeRight.Length), @(Model.EscapeRight.Length));
                    orderby_str.Remove(orderby_str.Length - @(Model.EscapeRight.Length), @(Model.EscapeRight.Length));
                }
            }

            var sql = string.Format("SELECT {0} FROM (SELECT ROW_NUMBER() OVER (ORDER BY {1}) AS Row, {0} FROM {2} {3}) AS Paged ", 
                column_str.ToString(), orderby_str.ToString(), tableName, where);
            var pageStart = (currentPage - 1) * pageSize;
            sql += string.Format(" WHERE Row >{0} AND Row <={1}", pageStart, pageStart + pageSize);
            count_sql += where;
            using (var conn = GetOpenConnection())
            {
                result.TotalRecords = conn.ExecuteScalar<int>(count_sql);
                result.TotalPages = result.TotalRecords / pageSize;
                if (result.TotalRecords % pageSize > 0)
                    result.TotalPages += 1;
                var list = conn.Query<T>(sql);
                result.Items = list.Count() == 0 ? (new List<T>()) : list.ToList();
            }

            return result;
        }
    }

    public class PageDataView<T>
    {
        private int _totalRecords;
        private IList<T> _Items;

        public PageDataView()
        { }

        public int TotalRecords
        {
            get { return _totalRecords; }
            set { _totalRecords = value; }
        }
        
        public IList<T> Items
        {
            get { return _Items; }
            set { _Items = value; }
        }

        public int CurrentPage { get; set; }
        public int TotalPages { get; set; }
    }
}